#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <windows.h>
#include "main.h"
#define TAILLE_MAX 100


int main()
{
    int erreursPossibles = 10;
    int verification = 0;
    int taillemotmystere = 0;
    char eppuisement = 0;
    int nbremots = 0;
    char lettre = 0;
    int reponse = 0;
    char *pointeurDifficulte = NULL;
    char *pointeurMotMystere = NULL;
    char *pointeurcopieMotMystere = NULL;
    char motMystere[TAILLE_MAX] = "";
    char copiemotMystere[TAILLE_MAX] = "";
    char *motetoile = NULL;
    char chaineDifficulte[TAILLE_MAX] = {0};
    char chaineRejouer[TAILLE_MAX] = {0};
    char chaineOui[4] = {'O', 'U', 'I', '\0'};
    char chaineNon[4] = {'N', 'O', 'N', '\0'};
    FILE *pointeur = NULL;


    printf("Bienvenue dans le jeu du pendu!\nLe but de ce jeu est de trouver le mot mystere.\nMais attention, vous n'avez le droit qu'a 10 erreurs avant d'etre pendu(e)!\n\n");
    Sleep(800);
    printf("Avant de commencer souhaitez-vous changer le nombre d'erreurs possibles,\npour adapter la difficulte?(oui ou non)...");

while (verification == 0)
    {
    scanf("%s", chaineDifficulte);
    pointeurDifficulte = chaineDifficulte;
    majuscules(pointeurDifficulte);

    if (strcmp(chaineDifficulte, chaineOui) == 0)                                      //Changement de difficulté
    {
        printf("\nTres bien, entrez un nombre d'erreurs possibles:.....");

        while (verification == 0)
        {
         scanf("%d", &erreursPossibles);
         if (erreursPossibles > 0)
           {
              printf("\nVous aurez donc %d erreurs possibles.", erreursPossibles);
              verification++;
           }
         else if (erreursPossibles <= 0)
           {
               printf("\nLe nombre entre n'est pas valide, entrez un nombre strictement positif:.....");

           }
        }

        verification = 1;

    }
    else if (strcmp(chaineDifficulte, chaineNon) == 0)
    {

        printf("\nTres bien, vous aurez donc %d erreurs possibles!\n", erreursPossibles);
        verification = 1;
    }
    else
    {
        printf("\nJe n'ai pas compris veuillez reessayer SVP....");
    }

    }
    scanf("%c", &eppuisement);

    printf("\n\nBien, nous pouvons commencer!\n\n");
    Sleep(1250);
    pointeur = fopen("test.txt", "r+");
    nbremots = comptemot(pointeur);
    printf("%d", nbremots);





                                                                                      //Choix mot mystere

    pointeurMotMystere = motMystere;
    taillemotmystere = taillemot(pointeurMotMystere);

    pointeurcopieMotMystere = copiemotMystere;
    etoiles(pointeurcopieMotMystere, taillemotmystere);


while (strcmp(pointeurcopieMotMystere, pointeurMotMystere) != 0 && erreursPossibles > 0)
{
    printf("Quel est le mot mystere : %s ?\n", copiemotMystere);
    printf("Entrez une lettre:");
    lettre = lettreentree();

    if(strchr(pointeurMotMystere, lettre) != 0)
       {
           printf("\nBonne lettre!\n\n");
           reponse = 1;
           remplacement(pointeurMotMystere, pointeurcopieMotMystere, lettre);

       }
    else
       {
           erreursPossibles--;
           printf("Mauvaise lettre! Plus que %d erreurs possibles\n\n", erreursPossibles);
           reponse = 2;
       }
}

if (strcmp(copiemotMystere, motMystere) == 0)
{
    printf("Bravo, vous avez trouvez le mot mystere,\nqui etait : %s .", motMystere);
}
else if (erreursPossibles == 0)
{
    printf("Vous avez ete pendu(e)!!\nLe mot mystere etait : %s .", motMystere);
}
else
  {
      printf("BUG FIN ELSE IF");
  }

verification = 0;

while (verification == 0)
{
printf("\n\nVoules-vous recommencer?(oui ou non)...");
scanf("%s", chaineRejouer);
majuscules(chaineRejouer);

if (strcmp (chaineRejouer, chaineOui) == 0)
{
    printf("\nTres bien, je redemarre le jeu...");
    scanf("%c", &eppuisement);
    Sleep(2500);
    printf("\n\n================================================================================\n\n");
    main();
}
else if(strcmp(chaineRejouer, chaineNon) == 0)
{
    printf("\nA bientot!\n");
    Sleep(1000);
    exit (0);
}
else
{
   printf("\nJe n'ai pas compris, reessayez!\n");
   scanf("%c", &eppuisement);
}
}

    return 0;
}


void majuscules(char *pointeur)                                                       //Mettre en majuscule un yableau avec un pointeur
{
    int i = 0;

    while (*(pointeur + i) != 0)
    {
        *(pointeur + i) = toupper(*(pointeur + i));
        i++;
    }
}


void etoiles(char *pointeur, int taille)                                              //Transformer une chaine de caracteres en *
{
    int i = 0;

    while (!(i > taille))
    {
        *(pointeur + i) = '*';
        i++;

    }
}


int taillemot(char *pointeur)                                                         //Determiner la taille d'un mot
{
    int i = 0;

    while (*(pointeur + i) != 0)
    {
       i++;
    }
    i--;
    return i;
}


char lettreentree()                                                                   //Entrer un carcatere
{
    char lettre = 0;
    lettre = getchar();
    lettre = toupper(lettre);

    while(getchar() != '\n');

    return lettre;

}


void remplacement(char *pointeur, char *pointeuramodifier, char lettre)               //Remplcer etoiles par lettre correct
{
    int i = 0;

    while (*(pointeur + i) != 0)
    {
        if (*(pointeur + i) == lettre)
        {
            *(pointeuramodifier + i) = lettre;
        }
       i++;

    }
}


int comptemot(FILE *pointeur)
{
    char caractereActuel[50] = {1};
    char chaineNULL[50] = {0};
    int i = 0;
    int j = 0;

    fseek(pointeur, 0, SEEK_SET);

    while(strcmp(caractereActuel, chaineNULL) != 0)
    {
        fgets(caractereActuel, 50, pointeur);
        if (caractereActuel[0] == ' ')
        {
            while (j != 50)
            {
            caractereActuel[0 + j] = 0;
            j++;
            }
        }
        i++;
    }
    i--;
    return i;
}
